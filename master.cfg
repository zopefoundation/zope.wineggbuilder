# -*- python -*-
# ex: set syntax=python:

import re
import time
import sys
import os.path
import subprocess
from twisted.python import log
from twisted.internet import reactor

from buildbot import locks

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
from buildbot.steps import source
from buildbot.steps import shell
from buildbot.process import factory

from buildbot.process.base import Build
from buildbot.status import html
from buildbot.scheduler import Scheduler, Nightly, Triggerable, Periodic
from buildbot.steps.trigger import Trigger

is_win32 = sys.platform == 'win32'

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local", "localpwd", max_builds=2)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]

FROMADDR = 'buildbot@winbot.zope.org'

######################################
# Custom helper classes

class SVN(source.SVN):

    show_revno = False # the LastChange step does it better

    def createSummary(self, log):
        log_text = log.getText()
        if self.show_revno:
            revno = self.extractRevno(log_text)
            if revno:
                self.descriptionDone = self.descriptionDone + ['r%s' % revno]

    def extractRevno(self, log_text):
        try:
            start_idx = log_text.rindex('At revision')
            end_idx = log_text.find('\n', start_idx)
        except ValueError:
            return None
        line = log_text[start_idx:end_idx]
        try:
            return re.findall('([0-9]+)', line)[0]
        except IndexError:
            return None


class Git(source.Git):
    show_revno = False # the LastChange step does it better


class Mercurial(source.Mercurial):
    pass
    #show_revno = False # the LastChange step does it better


class LastChange(shell.ShellCommand):

    command = ['svn', 'log', '--limit', '1']
    name = 'svn-last-change'
    description = ['svn log --limit 1']
    descriptionDone = ['last change']

    # xxx hardcoded
    url_template = 'http://zope3.pov.lt/trac/log/zope.release?rev=%s'

    def createSummary(self, log):
        log_text = log.getText()
        revno = self.extractRevno(log_text)
        if revno:
            text = self.formatRevno(revno)
            self.descriptionDone = self.descriptionDone + [text]

    def formatRevno(self, revno):
        text = 'r%s' % revno
        if self.url_template:
            url = self.url_template % revno
            text = '<a class="revlink" href="%s">%s</a>' % (url, text)
        return text

    def extractRevno(self, log_text):
        for line in log_text.splitlines():
            if line.startswith('r'):
                return line.split()[0][1:]
        return None


class LastChangeGit(shell.ShellCommand):

    command = ['git', 'log', '-1']
    name = 'git-last-change'
    description = ['git log -1']
    descriptionDone = ['last change']

    # xxx hardcoded
    url_template = 'https://github.com/buildout/buildout/commit/%s'

    def createSummary(self, log):
        log_text = log.getText()
        revno = self.extractRevno(log_text)
        if revno:
            text = self.formatRevno(revno)
            self.descriptionDone = self.descriptionDone + [text]

    def formatRevno(self, revno):
        text = revno
        if self.url_template:
            url = self.url_template % revno
            text = '<a class="revlink" href="%s">%s</a>' % (url, text)
        return text

    def extractRevno(self, log_text):
        for line in log_text.splitlines():
            if line.startswith('commit '):
                return line.split()[1]
        return None


class SVNInfo(shell.ShellCommand):

    command = ['svn', 'info']
    name = 'svn-info'
    description = ['svn info']
    descriptionDone = ['svn info']


class Test(shell.Test):

    started = None
    stopped = None

    tick_every = 10 # seconds

    def __init__(self, *args, **kw):
        shell.Test.__init__(self, *args, **kw)
        if 'name' in args:
            self.name = args['name']

    def start(self):
        shell.Test.start(self)
        self.started = time.time()
        reactor.callLater(self.tick_every, self.tick)

    def finished(self, results):
        if not self.stopped:
            self.stopped = time.time()
        shell.Test.finished(self, results)

    def tick(self):
        if not self.stopped:
            self.step_status.setText(self.describe(False))
            reactor.callLater(self.tick_every, self.tick)

    def describe(self, done=False):
        description = [self.name]
        if not done and self.started:
            running = time.time() - self.started
            description = [self.name, self.formatTime(running)]
        return description

    def createSummary(self, log):
        if not self.started:
            # just in case something async happens
            self.started = time.time()
        self.stopped = time.time()
        log_text = log.getText()
        totals = self.extractTotals(log_text)
        if totals:
            self.descriptionDone = self.descriptionDone + [totals]
        # the test runner lies about the time
        ## time_info = self.extractTime(log_text)
        time_info = self.formatTime(self.stopped - self.started)
        if time_info:
            self.descriptionDone = self.descriptionDone + [time_info]
        summary = self.extractSummary(log_text)
        if summary:
            self.addCompleteLog('summary', summary)

    def formatTime(self, seconds):
        return '%dm%02ds' % divmod(seconds, 60)

    def extractTotalsLine(self, log_text):
        try:
            start_idx = log_text.rindex('Total:')
            end_idx = log_text.find('\n', start_idx)
        except ValueError:
            return None
        return log_text[start_idx:end_idx]

    def extractTotals(self, log_text):
        totals_line = self.extractTotalsLine(log_text)
        if not totals_line:
            return None
        # Total: X tests, X failures, X errors in X minutes X.Y seconds.
        ntests, nfail, nerr = re.findall('([0-9.]+)', totals_line)[:3]
        return '%s/%s/%s' % (ntests, nfail, nerr)

    def extractTime(self, log_text):
        totals_line = self.extractTotalsLine(log_text)
        if not totals_line:
            return None
        # Total: X tests, X failures, X errors in [X minutes] X.Y seconds.
        time = totals_line.split(' in ')[-1]
        time = time.replace(' minutes ', 'm')
        time = time.replace(' seconds.', 's')
        time = re.sub('[.][0-9]+s', 's', time)
        return time

    def extractSummary(self, log_text):
        summary_idx = len(log_text)
        for interesting in ['Tests with errors:',
                            'Tests with failures:',
                            'Total:']:
            try:
                summary_idx = min(summary_idx,
                                  log_text.rindex('Tests with errors:'))
            except ValueError:
                pass
        return log_text[summary_idx:]

# Custom helper classes
######################################

######################################
# cleanup

def makeCleanfactory():

    f = factory.BuildFactory()

    f.addStep(shell.ShellCommand(
              command=r'python c:\buildmaster\cleanfolder.py c:\temp',
              haltOnFailure=True,
              name="clean temp",
              description="clean temp"))

    f.treeStableTimer = 300
    return f

def setupCleanupBuild(slow_lock, hour=01, minute=01):
    c['builders'].append({
        'name': 'cleanup',
        'slavename': 'local',
        'builddir': 'cleanup',
        'factory': makeCleanfactory(),
        'locks': [slow_lock],
    })

    c['schedulers'].append(Nightly(
                "Nightly cleanup", ['cleanup'], hour=hour, minute=minute,
                branch="trunk"))

# cleanup
######################################

######################################
# egg building

def makeEGGfactory():
    svn_url = 'svn://svn.zope.org/repos/main/zope.wineggbuilder/trunk'

    f = factory.BuildFactory()
    f.addStep(source.SVN(svnurl=svn_url, mode='clobber'))


    f.addStep(shell.Compile(name='bootstrap',
                command='python bootstrap.py',
                description=['bootstrapping'],
                descriptionDone=['bootstrap']))

    f.addStep(shell.Compile(name="buildout",
                command="bin\\buildout.exe",
                description=['buildout'],
                descriptionDone=['buildout']))

    f.addStep(shell.Compile(name="release eggs",
                command="bin\\build.exe -s rackspace.ini",
                description=['releasing eggs'],
                descriptionDone=['release eggs'],
                timeout=12000))

    f.treeStableTimer = 300
    return f

def setupEggBuild(slow_lock):
    c['builders'].append({
        'name': 'wineggbuilder',
        'slavename': 'local',
        'builddir': 'wineggbuilder',
        'factory': makeEGGfactory(),
        'locks': [slow_lock],
    })

    #c['schedulers'].append(Nightly(
    #            "Nightly egg build", ['wineggbuilder'], hour=01, minute=10,
    #            branch="trunk"))

    c['schedulers'].append(Periodic(
                "Periodic egg build", ['wineggbuilder'], periodicBuildTimer=1800,
                branch="trunk"))

# egg building
######################################


######################################
# platform definitions
class Platform(object):
    python = ''
    name = ''
    title = ''
    withcompiler = ''

    def __init__(self, **kw):
        for k, v in kw.items():
            setattr(self, k, v)

        self.bits = int(self.name[-2:])
        self.majorVersion = self.title[7:10]

PLATFORMS = dict(
    py_244_win32=Platform(
        name='py_244_win32',
        title='Python 2.4.4 win32',
        python=r'c:\Python24_32\python.exe',
        withcompiler=r'cmd /c c:\Python24_32\setupcompilerandexecute.bat %s'),
    py_254_win32=Platform(
        name='py_254_win32',
        title='Python 2.5.4 win32',
        python=r'c:\Python25_32\python.exe',
        withcompiler=r'cmd /c c:\Python25_32\setupcompilerandexecute.bat %s'),
    py_265_win32=Platform(
        name='py_265_win32',
        title='Python 2.6.5 win32',
        python=r'c:\Python26_32\python.exe',
        withcompiler=r'cmd /c c:\Python26_32\setupcompilerandexecute.bat %s'),
    py_265_win64=Platform(
        name='py_265_win64',
        title='Python 2.6.5 win64',
        python=r'c:\Python26_64\python.exe',
        withcompiler=r'cmd /c c:\Python26_64\setupcompilerandexecute.bat %s'),
    py_270_win32=Platform(
        name='py_270_win32',
        title='Python 2.7.0 win32',
        python=r'c:\Python27_32\python.exe',
        withcompiler=r'cmd /c c:\Python27_32\setupcompilerandexecute.bat %s'),
    py_270_win64=Platform(
        name='py_270_win64',
        title='Python 2.7.0 win64',
        python=r'c:\Python27_64\python.exe',
        withcompiler=r'cmd /c c:\Python27_64\setupcompilerandexecute.bat %s'),
)

PLATFORMS_3 = dict(
    py_323_win32=Platform(
        name='py_323_win32',
        title='Python 3.2.3 win32',
        python=r'c:\Python32_32\python.exe',
        withcompiler=r'cmd /c c:\Python32_32\setupcompilerandexecute.bat %s'),
    py_323_win64=Platform(
        name='py_323_win64',
        title='Python 3.2.3 win64',
        python=r'c:\Python32_64\python.exe',
        withcompiler=r'cmd /c c:\Python32_64\setupcompilerandexecute.bat %s'),
    py_330_win32=Platform(
        name='py_330_win32',
        title='Python 3.3.0 win32',
        python=r'c:\Python33_32\python.exe',
        withcompiler=r'cmd /c c:\Python33_32\setupcompilerandexecute.bat %s'),
    py_330_win64=Platform(
        name='py_330_win64',
        title='Python 3.3.0 win64',
        python=r'c:\Python33_64\python.exe',
        withcompiler=r'cmd /c c:\Python33_64\setupcompilerandexecute.bat %s'),
)

CLEAN_PLATFORMS = dict(
    py_244_win32=Platform(
        name='py_244_win32',
        title='Python 2.4.4 win32',
        python=r'c:\Python24_32_clean\python.exe',
        withcompiler=r'cmd /c c:\Python24_32_clean\setupcompilerandexecute.bat %s'),
    py_254_win32=Platform(
        name='py_254_win32',
        title='Python 2.5.4 win32',
        python=r'c:\Python25_32_clean\python.exe',
        withcompiler=r'cmd /c c:\Python25_32_clean\setupcompilerandexecute.bat %s'),
    py_265_win32=Platform(
        name='py_265_win32',
        title='Python 2.6.5 win32',
        python=r'c:\Python26_32_clean\python.exe',
        withcompiler=r'cmd /c c:\Python26_32_clean\setupcompilerandexecute.bat %s'),
    py_265_win64=Platform(
        name='py_265_win64',
        title='Python 2.6.5 win64',
        python=r'c:\Python26_64_clean\python.exe',
        withcompiler=r'cmd /c c:\Python26_64_clean\setupcompilerandexecute.bat %s'),
    py_270_win32=Platform(
        name='py_270_win32',
        title='Python 2.7.0 win32',
        python=r'c:\Python27_32_clean\python.exe',
        withcompiler=r'cmd /c c:\Python27_32_clean\setupcompilerandexecute.bat %s'),
    py_270_win64=Platform(
        name='py_270_win64',
        title='Python 2.7.0 win64',
        python=r'c:\Python27_64_clean\python.exe',
        withcompiler=r'cmd /c c:\Python27_64_clean\setupcompilerandexecute.bat %s'),
)

CLEAN_PLATFORMS_3 = dict(
    py_323_win32=Platform(
        name='py_323_win32',
        title='Python 3.2.3 win32',
        python=r'c:\Python32_32_clean\python.exe',
        withcompiler=r'cmd /c c:\Python32_32_clean\setupcompilerandexecute.bat %s'),
    py_323_win64=Platform(
        name='py_323_win64',
        title='Python 3.2.3 win64',
        python=r'c:\Python32_64_clean\python.exe',
        withcompiler=r'cmd /c c:\Python32_64_clean\setupcompilerandexecute.bat %s'),
    py_330_win32=Platform(
        name='py_330_win32',
        title='Python 3.3.0 win32',
        python=r'c:\Python33_33_clean\python.exe',
        withcompiler=r'cmd /c c:\Python33_33_clean\setupcompilerandexecute.bat %s'),
    py_330_win64=Platform(
        name='py_330_win64',
        title='Python 3.3.0 win64',
        python=r'c:\Python33_64_clean\python.exe',
        withcompiler=r'cmd /c c:\Python33_64_clean\setupcompilerandexecute.bat %s'),
)

# platform definitions
######################################

######################################
# ZTK dev/trunk tests

ZTK_DEV_PLATFORMS = PLATFORMS.copy()

del ZTK_DEV_PLATFORMS['py_244_win32']
del ZTK_DEV_PLATFORMS['py_254_win32']
del ZTK_DEV_PLATFORMS['py_265_win32']
del ZTK_DEV_PLATFORMS['py_265_win64']
del ZTK_DEV_PLATFORMS['py_270_win32']
del ZTK_DEV_PLATFORMS['py_270_win64']


def ztk_dev_builder(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(SVN(
              svnurl="svn://svn.zope.org/repos/main/zopetoolkit/trunk",
              haltOnFailure=True,
              mode="copy"))

    lc = LastChange()
    lc.url_template = 'http://zope3.pov.lt/trac/log/zopetoolkit?rev=%s'
    f.addStep(lc)

    f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))
    f.addStep(shell.ShellCommand(
              command=[platform.python, "bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=["sed", "-i", "s/svn+ssh/svn/", "ztk.cfg", "zopeapp.cfg"],
              haltOnFailure=True,
              name="disable ssh for svn",
              description="disable ssh for svn"))
    f.addStep(shell.ShellCommand(
              command=platform.withcompiler % r"bin\buildout.exe -c development.cfg",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(shell.ShellCommand(
              command=["svn", "revert", "ztk.cfg", "zopeapp.cfg"],
              haltOnFailure=True,
              name="revert ztk.cfg and zopeapp.cfg",
              description="revert ztk.cfg and zopeapp.cfg"))
    f.addStep(Test(
              command=[r"bin\test-ztk.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test ztk",
              description="test ztk trunks"))
    f.addStep(Test(
              command=[r"bin\test-zopeapp.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test zopeapp trunks",
              description="test zopeapp"))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def setupZTK_dev_tests(slow_lock, hour=02, minute=01):
    #hour = 02
    #minute = 01
    builders = []
    for pname in sorted(ZTK_DEV_PLATFORMS.keys()):
        platform = ZTK_DEV_PLATFORMS[pname]
        name = "ztk_dev %s" % platform.name
        builders.append(name)
        c['builders'].append(
            ztk_dev_builder(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly( "%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["zope-tests@zope.org"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )
# ZTK tests
######################################

######################################
# ZTK 1.0 tests

ZTK_10_PLATFORMS = PLATFORMS.copy()
del ZTK_10_PLATFORMS['py_244_win32']
del ZTK_10_PLATFORMS['py_270_win32']
del ZTK_10_PLATFORMS['py_270_win64']

def ztk_10_builder(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(SVN(
              svnurl="svn://svn.zope.org/repos/main/zopetoolkit/branches/1.0",
              haltOnFailure=True,
              mode="copy"))

    lc = LastChange()
    lc.url_template = 'http://zope3.pov.lt/trac/log/zopetoolkit?rev=%s'
    f.addStep(lc)

    f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))
    f.addStep(shell.ShellCommand(
              command=[platform.python, "bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test-ztk.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test ztk",
              description="test ztk trunks",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test-zopeapp.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test zopeapp trunks",
              description="test zopeapp",
              timeout=3600))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)

def setupZTK_10_tests(slow_lock, hour=02, minute=10):
    #hour = 02
    #minute = 10
    builders = []
    for pname in sorted(ZTK_10_PLATFORMS.keys()):
        platform = ZTK_10_PLATFORMS[pname]
        name = "ztk_10 %s" % platform.name
        builders.append(name)
        c['builders'].append(
            ztk_10_builder(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly( "%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["zope-tests@zope.org"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

# ZTK 1.0 tests
######################################

######################################
# ZTK 1.1 tests

ZTK_11_PLATFORMS = PLATFORMS.copy()
del ZTK_11_PLATFORMS['py_244_win32']

def ztk_11_builder(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(SVN(
              svnurl="svn://svn.zope.org/repos/main/zopetoolkit/branches/1.1",
              haltOnFailure=True,
              mode="copy"))

    lc = LastChange()
    lc.url_template = 'http://zope3.pov.lt/trac/log/zopetoolkit?rev=%s'
    f.addStep(lc)

    f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))
    f.addStep(shell.ShellCommand(
              command=[platform.python, "bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test-ztk.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test ztk",
              description="test ztk trunks",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test-zopeapp.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test zopeapp trunks",
              description="test zopeapp",
              timeout=3600))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)

def setupZTK_11_tests(slow_lock, hour=02, minute=10):
    #hour = 02
    #minute = 10
    builders = []
    for pname in sorted(ZTK_11_PLATFORMS.keys()):
        platform = ZTK_11_PLATFORMS[pname]
        name = "ztk_11 %s" % platform.name
        builders.append(name)
        c['builders'].append(
            ztk_11_builder(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly( "%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["zope-tests@zope.org"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

# ZTK 1.1 tests
######################################

######################################
# zc.buildout

ZC_BUILDOUT_PLATFORMS = CLEAN_PLATFORMS.copy()
del ZC_BUILDOUT_PLATFORMS['py_244_win32']
del ZC_BUILDOUT_PLATFORMS['py_254_win32']
ZC_BUILDOUT_PLATFORMS.update(CLEAN_PLATFORMS_3)

ZC_BUILDOUT_PLATFORMS_1 = CLEAN_PLATFORMS.copy()
del ZC_BUILDOUT_PLATFORMS_1['py_244_win32']


def zc_buildout_dev_builder(name, slavename, platform, locks, branch='HEAD'):
    # XXX: leave spaces later
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(Git(
              repourl="git://github.com/buildout/buildout.git",
              haltOnFailure=True,
              mode="copy",
              branch=branch))

    lc = LastChangeGit()
    #lc.url_template = 'http://zope3.pov.lt/trac/log/zc.buildout?rev=%s'
    f.addStep(lc)

    #f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))

    #actually bootstrap and buildout in one step
    cmd = platform.python + " dev.py"
    f.addStep(shell.ShellCommand(
              command=cmd,
              haltOnFailure=True,
              name="dev.py",
              description="dev.py"))

    cmd = r"bin\test.exe --exit-with-status -1"
    cmd = platform.withcompiler % cmd
    f.addStep(Test(
              #command=[r"bin\test.exe", "--exit-with-status", "-1"],
              command=cmd,
              haltOnFailure=False,
              name="test",
              description="test " + branch))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def setup_zc_buildout_dev_tests(slow_lock, hour=02, minute=20, branch='HEAD',
                                platforms=ZC_BUILDOUT_PLATFORMS):
    #hour = 02
    #minute = 20
    builders = []
    for pname in sorted(platforms.keys()):
        platform = platforms[pname]
        name = "zc_buildout_dev %s %s" % (platform.name, branch)
        builders.append(name)
        c['builders'].append(
            zc_buildout_dev_builder(name, 'local', platform, [slow_lock], branch))

        c['schedulers'].append(
            Nightly("%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="failing",
               fromaddr=FROMADDR,
               extraRecipients=["agroszer@gmail.com"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

    #c['status'].append(
    #  MailNotifier(mode="all",
    #           fromaddr=FROMADDR,
    #           extraRecipients=["zope-tests@zope.org"],
    #           sendToInterestedUsers=False,
    #           builders=builders,
    #           messageFormatter=message_formatter)
    #           )


# zc.buildout
######################################

######################################
# distribute

DISTRIBUTE_PLATFORMS = CLEAN_PLATFORMS.copy()
DISTRIBUTE_PLATFORMS.update(CLEAN_PLATFORMS_3)


def distribute_dev_builder(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(Mercurial(
              repourl="https://bitbucket.org/tarek/distribute",
              haltOnFailure=True,
              mode="copy"))

    # XXX: LastChangeMercurial ???
    #lc = LastChangeGit()
    #f.addStep(lc)

    cmd = platform.python + " setup.py test"
    cmd = platform.withcompiler % cmd
    f.addStep(Test(
              #command=[r"bin\test.exe", "--exit-with-status", "-1"],
              command=cmd,
              haltOnFailure=False,
              name="test",
              description="test"))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def setup_distribute_dev_tests(slow_lock, hour=02, minute=20,
                               platforms=DISTRIBUTE_PLATFORMS):
    #hour = 02
    #minute = 20
    builders = []
    for pname in sorted(platforms.keys()):
        platform = platforms[pname]
        name = "distribute_dev %s" % (platform.name, )
        builders.append(name)
        c['builders'].append(
            distribute_dev_builder(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly("%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["agroszer@gmail.com"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )


# distribute
######################################

######################################
# BlueBream

def bb_builder(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(SVN(
              svnurl="svn://svn.zope.org/repos/main/bluebream/trunk",
              haltOnFailure=True,
              mode="copy"))

    lc = LastChange()
    lc.url_template = 'http://zope3.pov.lt/trac/log/bluebream?rev=%s'
    f.addStep(lc)

    f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))

    f.addStep(shell.ShellCommand(
              command=[platform.python, r"bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test.exe", "-1", "--exit-with-status"]))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def setup_BB_dev_tests(slow_lock, hour=02, minute=30):
    #hour = 02
    #minute = 30
    builders = []
    for pname in sorted(PLATFORMS.keys()):
        platform = PLATFORMS[pname]
        name = "BlueBream_dev %s" % platform.name
        c['builders'].append(
            bb_builder(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly( "%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["zope-tests@zope.org"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

# BlueBream
######################################


######################################
# ZODB

ZODB_DEV_PLATFORMS = PLATFORMS.copy()
if 'py_244_win32' in ZODB_DEV_PLATFORMS:
    del ZODB_DEV_PLATFORMS['py_244_win32']
if 'py_254_win32' in ZODB_DEV_PLATFORMS:
    del ZODB_DEV_PLATFORMS['py_254_win32']


def ZODB_dev_builder_svn(name, slavename, platform, locks):
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(SVN(
              svnurl="svn://svn.zope.org/repos/main/ZODB/trunk",
              haltOnFailure=True,
              mode="copy"))

    lc = LastChange()
    lc.url_template = 'http://zope3.pov.lt/trac/log/ZODB?rev=%s'
    f.addStep(lc)

    f.addStep(SVNInfo())

    #f.addStep(shell.ShellCommand(
    #          command=["/usr/bin/virtualenv", "--distribute", "-p", python, "--no-site-packages", "sandbox"],
    #          haltOnFailure=True,
    #          name="virtualenv",
    #          description="virtualenv"))
    f.addStep(shell.ShellCommand(
              command=[platform.python, r"c:\buildmaster\bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=platform.withcompiler % r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test",
              description="test trunk"))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def ZODB_dev_builder_git(name, slavename, platform, locks):
    branch = 'HEAD'
    builddir = name.replace(' ', '_')
    f = factory.BuildFactory()
    f.addStep(Git(
              repourl="git://github.com/zopefoundation/ZODB.git",
              haltOnFailure=True,
              mode="copy",
              branch=branch))

    lc = LastChangeGit()
    #lc.url_template = 'http://zope3.pov.lt/trac/log/zc.buildout?rev=%s'
    f.addStep(lc)

    f.addStep(shell.ShellCommand(
              command=[platform.python, r"c:\buildmaster\bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))
    f.addStep(shell.ShellCommand(
              command=platform.withcompiler % r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))
    f.addStep(Test(
              command=[r"bin\test.exe", "--exit-with-status", "-1"],
              haltOnFailure=False,
              name="test",
              description="test trunk"))
    return dict(name=name,
                slavename=slavename,
                builddir=builddir,
                factory=f,
                locks=locks)


def setup_ZODB_dev_tests(slow_lock, hour=02, minute=40):
    #hour = 02
    #minute = 40
    builders = []
    for pname in sorted(ZODB_DEV_PLATFORMS.keys()):
        platform = ZODB_DEV_PLATFORMS[pname]
        name = "ZODB_dev %s" % platform.name
        builders.append(name)
        c['builders'].append(
            ZODB_dev_builder_git(name, 'local', platform, [slow_lock]))

        c['schedulers'].append(
            Nightly( "%s_nightly" % name, [name], hour=hour, minute=minute))
        minute += 1

    c['status'].append(
      MailNotifier(mode="failing",
               fromaddr=FROMADDR,
               extraRecipients=["jim@zope.com", "agroszer@gmail.com"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

    c['status'].append(
      MailNotifier(mode="all",
               fromaddr=FROMADDR,
               extraRecipients=["zope-tests@zope.org"],
               sendToInterestedUsers=False,
               builders=builders,
               messageFormatter=message_formatter)
               )

# ZODB
######################################

######################################
# mail status
from buildbot.status.html import WebStatus
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results


def message_formatter(mode, name, build, results, master_status):
    """Provide a customized message to BuildBot's MailNotifier.
    The last 80 lines of the log are provided as well as the changes
    relevant to the build.
    """
    result = Results[results]

    limit_lines = 80
    text = list()

    # status required by zope-tests list
    # http://docs.zope.org/zopetoolkit/process/buildbots.html
    status = 'UNKNOWN'
    if result == 'success':
        status = 'OK'
    if result == 'failure':
        status = 'FAILED'

    #subject = '%s : %s / %s' % (status, master_status.getProjectName(), name)
    subject = '%s : %s / %s' % (status, "winbot", name)
    text.append(subject)
    text.append("Build: %s" % master_status.getURLForThing(build))
    text.append('\n')
    text.append("Build Reason: %s" % build.getReason())
    text.append('\n')

    source = ""
    ss = build.getSourceStamp()
    if ss.branch:
        source += "[branch %s] " % ss.branch
    if ss.revision:
        source +=  ss.revision
    else:
        source += "HEAD"
    if ss.patch:
        source += " (plus patch)"
    text.append("Build Source Stamp: %s" % source)
    text.append('\n')
    text.append("Blamelist: %s" % ", ".join(build.getResponsibleUsers()))
    text.append('\n')
    text.append("Buildbot: %s" % master_status.getBuildbotURL())
    return {
        'body': "\n".join(text),
        'type': 'plain',
        'subject': subject,
        }

# mail status
######################################

######################################
# stuff taken from gocept.bsquare
# but heavily modified now

def bsquare_split_file(path):
    pieces = path.split("/")
    if len(pieces) < 2:
        return None
    project, branch = pieces[0], pieces[1]
    if branch != "trunk":
        return None
    return ("%s/%s" % (project, branch), "/".join(pieces[2:]))


def bsquare_make_factory_svn(svn_url, platform):
    f = factory.BuildFactory()
    f.addStep(SVN(baseURL=svn_url, mode='copy'))

    f.addStep(shell.ShellCommand(
              command=[platform.python, r"c:\buildmaster\bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))

    f.addStep(shell.ShellCommand(
              command=platform.withcompiler % r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))

    f.addStep(Test(name="test",
                command="bin\\test.exe --exit-with-status -1",
                description=['testing'],
                descriptionDone=['tests']))

    f.treeStableTimer = 300
    return f


def bsquare_make_factory_git(git_url, platform):
    f = factory.BuildFactory()
    f.addStep(Git(
              repourl=git_url,
              haltOnFailure=True,
              mode="copy"))

    f.addStep(shell.ShellCommand(
              command=[platform.python, r"c:\buildmaster\bootstrap.py"],
              haltOnFailure=True,
              name="bootstrap",
              description="bootstrap"))

    f.addStep(shell.ShellCommand(
              command=platform.withcompiler % r"bin\buildout.exe",
              haltOnFailure=True,
              name="buildout",
              description="buildout",
              timeout=3600))

    f.addStep(Test(name="test",
                command="bin\\test.exe --exit-with-status -1",
                description=['testing'],
                descriptionDone=['tests']))

    f.treeStableTimer = 300
    return f


# XXX:
# XXX: needs a total cleanup!
def bsquare_configure(c,
              svn_url=None, http_port=8010, allowForce=False,
              svnuser=None, svnpasswd=None,
              pollinterval=30, nightlyhour=None,
              poller=None, makefactory=bsquare_make_factory_svn,
              maxConcurrent=2,
              svnbin='svn',
              slow_lock=None):
    """Creates a buildout master configuration.

    The configuration returned is almost functional. You just need to add
    slaves.

    Options are as follows:
    * svn_url: URL of the SVN repository
    * http_port: where buildbot will listen as an HTTP server
    * allowForce: allow force builds (True/False)
    * svnuser: username to be passed to svn
    * svnpasswd: password to be passed to svn
    * pollinterval: interval in seconds to poll the svn repo for changes
    * nightlyhour: run nightly builds at this hour
    * poller: custom poller object instance to be used instead of SVNPoller
    * makefactory:
      * can a simple callable factory that gets the svn_url
      * can be a dict of factories getting svn_url keyed by project name
        * ``__default__`` is a special key, bsquare reverts to this factory
          first when there is none for a project
        * bsquare reverts to make_factory as last
    * maxConcurrent: maximum number of concurrent builds
    * svnbin: passed directly to SVNPoller (win32 seems to be picky about
                                            svn location)

    """
    if poller is None:
        if svn_url:
            c['change_source'] = SVNPoller(svn_url,
                                           split_file=bsquare_split_file,
                                           svnuser=svnuser,
                                           svnpasswd=svnpasswd,
                                           pollinterval=pollinterval,
                                           svnbin=svnbin)
    else:
        c['change_source'] = poller

    if slow_lock is None:
        slow_lock = locks.SlaveLock("cpu", maxCount=maxConcurrent)

    projects = open("project-list.cfg", "rb").readlines()
    projects = [x.strip() for x in projects]

    platforms = {'py_265_32': PLATFORMS['py_265_win32']}

    for project in projects:
        if not project or project.startswith('#'):
            continue  # comment or empty line

        project, repourl = project.split(',')
        project = project.strip()
        repourl = repourl.strip()

        for bsquare_platname, bsquare_platform in platforms.items():
            #if isinstance(makefactory, dict):
            #    f = makefactory.get(project,
            #                        makefactory.get('__default__', makefactory))
            #    f = f(repourl, platform=bsquare_platform)
            #else:
            #    f = makefactory(repourl, platform=bsquare_platform)
            isgit = repourl.lower().startswith('git')
            if isgit:
                makefactory = bsquare_make_factory_git
            else:
                makefactory = bsquare_make_factory_svn
            f = makefactory(repourl, platform=bsquare_platform)

            bname = '%s_%s' % (project, bsquare_platname)

            c['builders'].append({
                'name': bname,
                'slavename': 'local',
                'builddir': project,
                'factory': f,
                'locks': [slow_lock],
            })
            del f

            c['schedulers'].append(Scheduler(
                name=bname,
                branch="%s/trunk" % project,
                treeStableTimer=pollinterval * 2 + 10,
                builderNames=[bname]))

            if nightlyhour is not None:
                if isgit:
                    c['schedulers'].append(Nightly(
                        "%s nightly" % project, [bname], hour=[nightlyhour]))
                else:
                    c['schedulers'].append(Nightly(
                        "%s nightly" % project, [bname], hour=[nightlyhour],
                        branch="%s/trunk" % project))

            c['status'].append(
              MailNotifier(mode="failing",
                       fromaddr=FROMADDR,
                       extraRecipients=["agroszer@gmail.com",
                                        "zope-tests@zope.org"],
                       sendToInterestedUsers=False,
                       builders=[bname],
                       messageFormatter=message_formatter)
                       )

    return c
# stuff taken from gocept.bsquare
######################################

#let's stick with ONE test
slow_lock = locks.SlaveLock("cpu", maxCount=1)

c['schedulers'] = []
c['builders'] = []
c['status'] = []

setupCleanupBuild(slow_lock, hour=20, minute=01)

setupEggBuild(slow_lock) #every 30 mins

#there are at most 6 builds for each project,
#every build is setup on the next minute
#that will never be true, but at least keeps
#the builds nicely sorted
setupZTK_dev_tests(slow_lock, hour=20, minute=10)
setupZTK_10_tests(slow_lock, hour=20, minute=20)
setupZTK_11_tests(slow_lock, hour=20, minute=30)
setup_zc_buildout_dev_tests(slow_lock, hour=20, minute=40, branch='master')
setup_zc_buildout_dev_tests(slow_lock, hour=20, minute=50, branch='1',
                            platforms=ZC_BUILDOUT_PLATFORMS_1)
setup_distribute_dev_tests(slow_lock, hour=21, minute=10)
setup_ZODB_dev_tests(slow_lock, hour=21, minute=50)
setup_BB_dev_tests(slow_lock, hour=21, minute=55)

bsquare_configure(c,
              pollinterval = 300,
              nightlyhour=23,
              slow_lock = slow_lock,
              svnbin='c:\\svn\\svn.exe')

#NO proxy via apache, so it can be kicked locally at least
c['status'].append(html.WebStatus(http_port=8009, allowForce=True, logRotateLength=100000000))

#proxy THIS via apache
c['status'].append(html.WebStatus(http_port=8010, allowForce=False, logRotateLength=100000000))


c['projectName'] = "Zope wineggbuilder and windows buildbot"
c['projectURL'] = "http://www.zope.org/"
c['buildbotURL'] = "http://winbot.zope.org/"
c['slavePortnum'] = "tcp:8989:interface=127.0.0.1"
c['changeHorizon'] = 100
c['buildHorizon'] = 100
c['eventHorizon'] = 100
c['logHorizon'] = 100
